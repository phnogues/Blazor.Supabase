@page "/account/reset-password"

<h1>Changement de mot de passe</h1>

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
	<RadzenTemplateForm Context="registerForm" TItem="ResetPasswordModel" Data=@model Submit=@Submit InvalidSubmit=@OnInvalidSubmit>
		<RadzenStack Gap="1rem" class="rz-p-sm-12">
			<RadzenFormField Text="Password" Variant="@variant">
				<ChildContent>
					<RadzenPassword Name="Password" @bind-Value="@model.Password" Placeholder="Enter password..." AutoComplete="false" aria-label="enter password" />
				</ChildContent>
				<Helper>
					<RadzenRequiredValidator Component="Password" Text="Password is required" />
				</Helper>
			</RadzenFormField>

			<RadzenFormField Text="RepeatPassword" Variant="@variant">
				<ChildContent>
					<RadzenPassword Name="RepeatPassword" @bind-Value="@model.RepeatPassword" Placeholder="Enter password..." AutoComplete="false" aria-label="enter password" />
				</ChildContent>
				<Helper>
					<RadzenRequiredValidator Component="RepeatPassword" Text="RepeatPassword is required" />
					<RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.RepeatPassword)) Value=@model.Password Component="RepeatPassword" Text="Passwords not the same" Style="position: absolute" />
				</Helper>
			</RadzenFormField>

			<RadzenButton ButtonType="ButtonType.Submit" Text="Change"></RadzenButton>
		</RadzenStack>
	</RadzenTemplateForm>

	<p class="text-center text-danger">
		@error
	</p>

</RadzenCard>

@code {

	[Parameter]
	public string accessToken { get; set; }

	Variant variant = Variant.Outlined;

	[Inject]
	NotificationService _notificationService { get; set; }

	[Inject]
	NavigationManager _navigationManager { get; set; }

	[Inject]
	AuthService _authService { get; set; }

	ResetPasswordModel model = new ResetPasswordModel();
	string error;

	async Task Submit(ResetPasswordModel model)
	{
		error = string.Empty;
		var uri = new Uri(_navigationManager.Uri, UriKind.Absolute);
		var fragment = uri.Fragment;
		if (fragment.StartsWith('#'))
		{
			var parameters = fragment.Substring(1).Split('&').Select(p => p.Split('=')).ToDictionary(p => p[0], p => p[1]);

			if (parameters.ContainsKey("error"))
			{
				error = "Error updating password, link has expired";
				_notificationService.Notify(NotificationSeverity.Error, "Error updating password", "The link has expired");
				return;
			}

			model.AccessToken = parameters["access_token"];
			model.RefreshToken = parameters["refresh_token"];
		}

		var result = await _authService.UpdatePassword(model);

		if (result.IsSuccess)
		{
			_notificationService.Notify(NotificationSeverity.Success, "Password update", "Success !");

			await _authService.LoginAsync(result.Value.Email, model.Password);

			_navigationManager.NavigateTo("/account/manage", true);
		}
		else
		{
			_notificationService.Notify(NotificationSeverity.Error, "Error updating password", result.Errors.ToStringError());
		}
	}

	void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
	{
		_notificationService.Notify(NotificationSeverity.Error, "Error validating form", "Please check the fields");
	}
}
