@page "/crepes"

<PageTitle>Our Crepes | Crep Store !</PageTitle>
<h1>Our Crepes</h1>

@if (Crepes is not null)
{
	<div class="d-flex flex-wrap">

		@foreach (var crepe in Crepes)
		{
			<RadzenCard class="rz-my-4 rz-mx-4 col-md-3">
				
					<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem">
						<RadzenImage Path="@(string.IsNullOrEmpty(crepe.ImageUrl) ? Constants.DEFAULT_IMAGE : crepe.ImageUrl)" Style="width: 100px; height: 100px; border-radius: 50%;" />
						<RadzenStack Gap="0">
							<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Name</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1"><b>@crepe.Name</b></RadzenText>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Price</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1"><b>@crepe.Price €</b></RadzenText>						
						</RadzenStack>
					</RadzenStack>
				<RadzenStack>
					<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Ingredients</RadzenText>
					<RadzenText TextStyle="TextStyle.Body2"><b>@string.Join(", ", crepe.Ingredients.Select(i => i.Name))</b></RadzenText>
				</RadzenStack>
			</RadzenCard>
		}
	</div>

	@if (!Crepes.Any())
	{
		<p class="alert alert-warning">
			No crepes found.
		</p>
	}
}
else
{
	<p>Loading...</p>
}

@code {
	[Inject]
	private CrepeRepository _crepeRepository { get; set; }

	IEnumerable<CrepeDto> Crepes { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Crepes = await _crepeRepository.GetAll();

		await base.OnInitializedAsync();
	}
}
