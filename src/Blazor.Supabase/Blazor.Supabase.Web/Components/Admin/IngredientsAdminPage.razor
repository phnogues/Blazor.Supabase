@page "/admin/ingredients"

@using BlazorSupabase.Data
@using BlazorSupabase.Models.Entities
@using FluentResults

<h1>Ingredients - Admin</h1>


<div class="pt-5">
	<h3>All ingredients</h3>

	<RadzenDataGrid @ref="ingredientsGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" Data="@Ingredients" TItem="Ingredient"
					RowCreate="@OnCreateRow"
					RowUpdate="@OnUpdateRow">

		<HeaderTemplate>
			<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Ingredient" Click="@InsertRow" />
		</HeaderTemplate>

		<Columns>
			<RadzenDataGridColumn Property="Id" Title="ID" />
			<RadzenDataGridColumn Property="Name" Title="Name">
				<EditTemplate Context="ingredient">
					<RadzenTextBox @bind-Value="ingredient.Name" Style="width:200px; display: block" Name="Name" aria-label="Enter ingredient name" />
					<RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
				</EditTemplate>
			</RadzenDataGridColumn>

			<RadzenDataGridColumn Context="ingredient" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
				<Template Context="ingredient">
					<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(ingredient))" @onclick:stopPropagation="true">
					</RadzenButton>
					<RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(ingredient))" @onclick:stopPropagation="true">
					</RadzenButton>
				</Template>
				<EditTemplate Context="ingredient">
					<RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(ingredient))" aria-label="Save">
					</RadzenButton>
					<RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(ingredient))" aria-label="Cancel">
					</RadzenButton>
					<RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(ingredient))" aria-label="Delete">
					</RadzenButton>
				</EditTemplate>
			</RadzenDataGridColumn>
		</Columns>
	</RadzenDataGrid>
</div>

@code {
	// UI
	RadzenDataGrid<Ingredient> ingredientsGrid;
	Variant variant = Variant.Outlined;

	IEnumerable<Ingredient> Ingredients = new List<Ingredient>();

	// Injected repositories
	[Inject]
	IngredientRepository _ingredientRepository { get; set; }

	[Inject]
	NotificationService _notificationService { get; set; }


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		await LoadDatas();
	}

	async Task InsertRow()
	{
		var ingredient = new Ingredient();
		await ingredientsGrid.InsertRow(ingredient);
	}

	async void OnCreateRow(Ingredient ingredient)
	{
		await _ingredientRepository.Insert(ingredient);
	}

	async void OnUpdateRow(Ingredient ingredient)
	{
		await _ingredientRepository.Update(ingredient);
	}

	async Task EditRow(Ingredient ingredient)
	{
		await ingredientsGrid.EditRow(ingredient);
	}

	async Task DeleteRow(Ingredient ingredient)
	{
		Result result = await _ingredientRepository.Delete(ingredient);
		if (result.IsFailed)
		{
			_notificationService.Notify(NotificationSeverity.Error, "Error", result.Errors.First().Message);
		}
		await LoadDatas();
	}

	async Task SaveRow(Ingredient ingredient)
	{
		await ingredientsGrid.UpdateRow(ingredient);
	}

	void CancelEdit(Ingredient ingredient)
	{
		ingredientsGrid.CancelEditRow(ingredient);
	}

	async Task LoadDatas()
	{
		Ingredients = await _ingredientRepository.GetAll();
	}
}
